{"version":3,"file":"index.0NrgosTd.js","sources":["../../src/main.ts"],"sourcesContent":["import \"./style.css\";\n\n// Add global declaration for the appLoaded flag\ndeclare global {\n    interface Window {\n        appLoaded: boolean;\n    }\n}\n\ninterface WordData {\n    word: string;\n    missingVowelIndex: number;\n    correctWord: string;\n    displayWord: string;\n}\n\n// Set flag to indicate the script has successfully loaded\nwindow.appLoaded = true;\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const wordDisplay = document.getElementById(\n        \"word-display\",\n    ) as HTMLDivElement;\n    const feedback = document.getElementById(\"feedback\") as HTMLDivElement;\n    const nextButton = document.getElementById(\n        \"next-button\",\n    ) as HTMLButtonElement;\n    const scoreDisplay = document.getElementById(\"score\") as HTMLSpanElement;\n    const attemptsDisplay = document.getElementById(\n        \"attempts\",\n    ) as HTMLSpanElement;\n    const answerInput = document.getElementById(\n        \"answer-input\",\n    ) as HTMLInputElement;\n    const submitButton = document.getElementById(\n        \"submit-button\",\n    ) as HTMLButtonElement;\n\n    const VOWELS: string = \"аеёиоуыэюя\";\n    let wordsData: WordData[] = [];\n    let currentWordIndex: number = -1;\n    let score: number = 0;\n    let attempts: number = 0;\n    let isAnswered: boolean = false;\n\n    async function loadWords(): Promise<void> {\n        try {\n            // Use the base URL from Vite environment\n            const basePath = (import.meta as any).env.BASE_URL || '/';\n            const response: Response = await fetch(`${basePath}spelling.txt`);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const text: string = await response.text();\n            parseAndStoreWords(text);\n            if (wordsData.length > 0) {\n                shuffleArray(wordsData);\n                displayNextWord();\n            } else {\n                wordDisplay.textContent = \"No words found in file.\";\n                nextButton.disabled = true;\n                submitButton.disabled = true;\n            }\n        } catch (error) {\n            console.error(\"Error loading or parsing words file:\", error);\n            wordDisplay.textContent = \"Error loading words.\";\n            feedback.textContent =\n                \"Could not load spelling.txt. Please check the file and console.\";\n            feedback.className = \"feedback incorrect\";\n            nextButton.disabled = true;\n            submitButton.disabled = true;\n        }\n    }\n\n    function parseAndStoreWords(text: string): void {\n        // First split by lines, then process each line\n        const lines = text\n            .trim()\n            .split(\"\\n\")\n            .map((line) => line.trim())\n            .filter((line) => line.length > 0);\n\n        // Process each line, handling comma-separated forms\n        const processedWords: WordData[] = [];\n\n        for (const line of lines) {\n            // Split by comma to handle multiple forms\n            const wordForms = line.split(\",\").map((form) => form.trim());\n\n            for (const word of wordForms) {\n                // Skip empty forms\n                if (word.length === 0) continue;\n\n                const wordLower: string = word.toLowerCase();\n\n                // Find vowels in the word\n                const vowelIndices: number[] = [];\n                for (let i = 0; i < wordLower.length; i++) {\n                    if (VOWELS.includes(wordLower[i])) {\n                        vowelIndices.push(i);\n                    }\n                }\n\n                // Skip words with no vowels\n                if (vowelIndices.length === 0) continue;\n\n                // Randomly select a vowel to remove\n                const randomVowelIndex = Math.floor(Math.random() * vowelIndices.length);\n                const missingVowelIndex = vowelIndices[randomVowelIndex];\n\n                // Create a display word with the missing vowel\n                const displayWordChars = wordLower.split('');\n                displayWordChars[missingVowelIndex] = '_';\n                const displayWord = displayWordChars.join('');\n\n                processedWords.push({\n                    word: wordLower,\n                    missingVowelIndex: missingVowelIndex,\n                    correctWord: wordLower,\n                    displayWord: displayWord\n                });\n            }\n        }\n\n        wordsData = processedWords;\n    }\n\n    function displayNextWord(): void {\n        if (wordsData.length === 0) return;\n\n        isAnswered = false;\n        currentWordIndex = (currentWordIndex + 1) % wordsData.length;\n        const currentWord: WordData = wordsData[currentWordIndex];\n\n        wordDisplay.innerHTML = \"\";\n        wordDisplay.classList.remove(\"answered\");\n        feedback.textContent = \"\";\n        feedback.className = \"feedback\";\n        nextButton.disabled = true;\n\n        // Enable the input and submit button\n        answerInput.value = \"\";\n        answerInput.disabled = false;\n        submitButton.disabled = false;\n        answerInput.focus();\n\n        // Display the word with the missing vowel\n        currentWord.displayWord.split(\"\").forEach((char: string) => {\n            const span: HTMLSpanElement = document.createElement(\"span\");\n            span.textContent = char;\n            if (char === '_') {\n                span.classList.add(\"missing-vowel\");\n            }\n            wordDisplay.appendChild(span);\n        });\n    }\n\n    function handleAnswer(): void {\n        if (isAnswered) return;\n\n        isAnswered = true;\n        wordDisplay.classList.add(\"answered\");\n\n        const userAnswer: string = answerInput.value.toLowerCase();\n        const currentWord: WordData = wordsData[currentWordIndex];\n        const correctVowel: string = currentWord.word[currentWord.missingVowelIndex];\n\n        // Disable input after answering\n        answerInput.disabled = true;\n        submitButton.disabled = true;\n\n        attempts++;\n        attemptsDisplay.textContent = attempts.toString();\n\n        // Find the missing vowel span\n        const missingVowelSpan = wordDisplay.querySelector(\".missing-vowel\") as HTMLSpanElement;\n\n        if (userAnswer === correctVowel) {\n            score++;\n            scoreDisplay.textContent = score.toString();\n            feedback.textContent = \"Correct!\";\n            feedback.className = \"feedback correct\";\n\n            if (missingVowelSpan) {\n                missingVowelSpan.textContent = correctVowel;\n                missingVowelSpan.classList.add(\"correct-answer\");\n            }\n        } else {\n            feedback.textContent = `Incorrect. The correct word is: ${currentWord.word}`;\n            feedback.className = \"feedback incorrect\";\n\n            if (missingVowelSpan) {\n                missingVowelSpan.textContent = correctVowel;\n                missingVowelSpan.classList.add(\"correct-answer\");\n\n                // Show what the user guessed\n                if (userAnswer.length > 0) {\n                    feedback.textContent += ` (you entered: ${userAnswer})`;\n                }\n            }\n        }\n\n        nextButton.disabled = false;\n    }\n\n    function shuffleArray<T>(array: T[]): void {\n        for (let i: number = array.length - 1; i > 0; i--) {\n            const j: number = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n    nextButton.addEventListener(\"click\", displayNextWord);\n    submitButton.addEventListener(\"click\", handleAnswer);\n\n    // We'll use a flag to prevent immediate next word after answering\n    let justAnswered = false;\n\n    // Handle Enter key in the input field\n    answerInput.addEventListener(\"keypress\", (event) => {\n        if (event.key === \"Enter\" && !isAnswered) {\n            // If not answered yet, submit the answer\n            handleAnswer();\n            // Set flag to prevent immediate next word\n            justAnswered = true;\n            // Reset the flag after a short delay\n            setTimeout(() => {\n                justAnswered = false;\n            }, 300);\n        }\n    });\n\n    // Add a document-wide event listener for Enter key to handle next word\n    document.addEventListener(\"keypress\", (event) => {\n        if (event.key === \"Enter\" && isAnswered && !justAnswered) {\n            // If already answered and not immediately after answering, go to next word\n            displayNextWord();\n        }\n    });\n\n    nextButton.disabled = true;\n    submitButton.disabled = true;\n    loadWords();\n});\n"],"names":["wordDisplay","feedback","nextButton","scoreDisplay","attemptsDisplay","answerInput","submitButton","VOWELS","wordsData","currentWordIndex","score","attempts","isAnswered","loadWords","response","text","parseAndStoreWords","shuffleArray","displayNextWord","error","lines","line","processedWords","wordForms","form","word","wordLower","vowelIndices","i","randomVowelIndex","missingVowelIndex","displayWordChars","displayWord","currentWord","char","span","handleAnswer","userAnswer","correctVowel","missingVowelSpan","array","j","justAnswered","event"],"mappings":"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"}